#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */


#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10
#include <dt-bindings/zmk/pointing.h>
&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <2>;
};
&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <1>;
};


&sk {
    quick-release;
    release-after-ms = <5000>;
    lazy;
};

&sl { release-after-ms = <5000>; };

/ {
    behaviors {
        td_kpkp_300ms_shiftcaps: td_kpkp_300ms_shiftcaps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;

            label = "TD_KPKP_300MS_SHIFTCAPS";
            tapping-term-ms = <300>;
        };

        holdtap_kpkp_holdpref: holdtap_kpkp_holdpref {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_KPKP_HOLDPREF (for esc, ctrl, etc)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
        };

        sticky_key_5k_qe_lz_moddis: sticky_key_5k_qe_lz_moddis {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_5K_QE_LZ_MODDIS";
            bindings = <&sk>;
            #binding-cells = <1>;
            ignore-modifiers;
            release-after-ms = <5000>;
            quick-release;
            lazy;
        };

        sticky_lay_5k_qe_lz_moddis: sticky_lay_5k_qe_lz_moddis {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_LAY_5K_QE_LZ_MODDIS";
            bindings = <&sl>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            ignore-modifiers;
            lazy;
            quick-release;
        };

        holdtap_kpkp_balpref: holdtap_kpkp_balpref {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_KPKP_BALPREF";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
        };

        holdtap_kpkp_tappref: holdtap_kpkp_tappref {
            compatible = "zmk,behavior-hold-tap";
            label = "holdtap_kpkp_tappref (for homerow mods)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
        };

        holdtap_kpto_tappref: holdtap_kpto_tappref {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_KPTO_TAPPREF (for layer taps)";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <300>;
        };

        holdtap_KrStickkp_500ms_tappref: holdtap_KrStickkp_500ms_tappref {
            compatible = "zmk,behavior-hold-tap";
            label = "holdtap_KrStickkp_500ms_tappref";
            bindings = <&key_repeat>, <&sticky_kp_1000ms>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <100>;
        };

        sticky_kp_1000ms: sticky_kp_1000ms {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KP_1000MS";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
        };

        holdtap_sticktd_stickkp_tdshica: holdtap_sticktd_stickkp_tdshica {
            compatible = "zmk,behavior-hold-tap";
            label = "holdtap_sticktd_stickkp_tdshica (shiftcaps)";
            bindings = <&sticky_kp_1000ms>, <&td_kpkp_300ms_shiftcaps>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
        };

        hwu: hwu {
            compatible = "zmk,behavior-hold-tap";
            label = "HWU";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-while-undecided;
        };

        hwul: hwul {
            compatible = "zmk,behavior-hold-tap";
            label = "HWUL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-while-undecided-linger;
        };

        hwrt: hwrt {
            compatible = "zmk,behavior-hold-tap";
            label = "HWRT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            retro-tap;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        zmisc_HighContrast: zmisc_HighContrast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(PRINTSCREEN))>;
            label = "ZMISC_HIGHCONTRAST";
        };

        MacParagrafzeichen: MacParagrafzeichen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp N0 &kp N1 &kp N6 &kp N7>;

            label = "MACPARAGRAFZEICHEN";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_rgbtog {
            bindings = <&rgb_ug RGB_TOG>;
            key-positions = <2 3>;
            require-prior-idle-ms = <10>;
        };

        combo_kp {
            bindings = <&kp PERIOD>;
            key-positions = <1 2>;
            require-prior-idle-ms = <10>;
        };

        combo_kp2 {
            bindings = <&kp PERIOD>;
            key-positions = <1 2 3>;
            require-prior-idle-ms = <10>;
        };

        to2 {
            bindings = <&to 2>;
            key-positions = <47 23>;
            require-prior-idle-ms = <10>;
        };

        to3 {
            bindings = <&to 3>;
            key-positions = <47 23 24>;
            require-prior-idle-ms = <10>;
        };

        to4 {
            bindings = <&to 4>;
            key-positions = <47 23 24 25>;
            require-prior-idle-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Zer0 {
            display-name = "SveaHej";
            bindings = <
&kp TAB     &kp RA(W)                           &kp P  &kp O                                                      &kp U                                          &kp Y                                                                        &kp UP               &kp Q      &kp G                                     &kp D                             &kp L  &kp W                       &holdtap_kpkp_holdpref AT_SIGN EXCL
&kp PERIOD  &kp A                               &kp H  &holdtap_kpkp_tappref LEFT_WIN E                           &holdtap_kpkp_tappref LEFT_ALT I               &holdtap_kpkp_holdpref SEMI COMMA                                  &kp LEFT  &none     &kp RIGHT  &kp F      &holdtap_kpkp_tappref LEFT_ALT S          &holdtap_kpkp_tappref LEFT_WIN T  &kp N  &kp R                       &holdtap_kpkp_holdpref SLASH MINUS
&kp PERIOD  &holdtap_kpkp_tappref PERIOD RA(P)  &kp J  &kp RA(Q)                                                  &kp K                                          &holdtap_kpkp_holdpref COLON DOT               &kp C_PLAY_PAUSE              &kp DOWN             &kp B      &kp C                                     &kp M                             &kp V  &holdtap_kpkp_holdpref Z X  &holdtap_kpkp_holdpref ASTRK APOS
                                                       &holdtap_kpkp_holdpref LC(LS(LA(LEFT_COMMAND))) BACKSPACE  &holdtap_sticktd_stickkp_tdshica LEFT_SHIFT 0  &holdtap_kpkp_holdpref LC(LS(LEFT_ALT)) SPACE                                                     &kp ENTER  &holdtap_KrStickkp_500ms_tappref 0 LCTRL  &to 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        S1M {
            display-name = "SYM";
            bindings = <
&kp DOT     &kp DOT     &kp DOT  &kp DOT  &kp DOT  &kp DOT                                &mmv MOVE_UP                     &kp DOT  &MacParagrafzeichen               &kp DOT                           &kp DOT  &kp DOT                                 &kp DOT
&kp DELETE  &kp DOT     &kp DOT  &kp DOT  &kp DOT  &kp DOT                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp DOT  &holdtap_kpkp_holdpref LBKT LPAR  &holdtap_kpkp_holdpref RBKT RPAR  &kp A    &holdtap_kpkp_holdpref AMPERSAND CARET  &to 4
&to 0       &kp PERIOD  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp K_MUTE                    &mmv MOVE_DOWN                   &kp DOT  &kp DOT                           &kp DOT                           &kp DOT  &kp DOT                                 &to 3
                                 &trans   &to 0    &trans                                                                  &trans   &trans                            &to 2
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        Navii {
            label = "HeyListen";
            display-name = "HeyListen";
            bindings = <
&kp F1          &kp F2          &kp F3           &kp F4     &kp F5          &kp F6                                       &mmv MOVE_UP                     &kp F7      &holdtap_kpkp_holdpref LEFT_ALT F8  &holdtap_kpkp_holdpref TAB UP_ARROW  &kp F10          &kp F11  &kp F12
&kp SCROLLLOCK  &kp ESCAPE      &mkp RCLK        &mkp MCLK  &mkp LCLK       &kp PAGE_UP                  &mmv MOVE_LEFT  &none           &mmv MOVE_RIGHT  &kp PERIOD  &kp LEFT                            &kp DOWN_ARROW                       &kp RIGHT_ARROW  &kp DOT  &to 5
&to 1           &msc SCRL_LEFT  &msc SCRL_RIGHT  &mkp MB4   &mkp MB5        &kp PAGE_DOWN  &kp C_STOP                    &mmv MOVE_DOWN                   &kp DOT     &kp HOME                            &kp F9                               &kp END          &kp DOT  &to 4
                                                 &trans     &kp LEFT_SHIFT  &trans                                                                        &kp ENTER   &kp LCTRL                           &to 3
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        MultiNam3 {
            bindings = <
&kp DOT  &kp DOT                            &hwu LEFT_SHIFT A                      &hwul LEFT_SHIFT B                   &hwrt LEFT_SHIFT C  &kp DOT                      &kp DOT           &kp DOT     &kp N1  &kp N2  &kp N3  &kp DOT  &kp DOT
&kp DOT  &holdtap_kpkp_holdpref HASH MINUS  &holdtap_kpkp_holdpref DLLR KP_DIVIDE  &holdtap_kpkp_holdpref PERCENT PLUS  &kp EQUAL           &kp DOT             &kp DOT  &kp DOT  &kp DOT  &kp PERIOD  &kp N4  &kp N5  &kp N6  &kp N0   &to 5
&to 2    &kp DOT                            &kp DOT                                &kp DOT                              &kp DOT             &kp DOT  &kp DOT             &kp DOT           &kp DOT     &kp N7  &kp N8  &kp N9  &kp DOT  &to 4
                                                                                   &trans                               &trans              &trans                                         &trans      &trans  &to 2
            >;

            label = "MultiNam3";
        };

        EatMy4ts {
            bindings = <
&rgb_ug RGB_COLOR_HSB(183,49,56)  &rgb_ug RGB_COLOR_HSB(303,58,40)  &rgb_ug RGB_COLOR_HSB(309,78,47)  &rgb_ug RGB_COLOR_HSB(192,66,45)  &kp DOT  &kp DOT                      &kp DOT           &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT
&kp DOT                           &kp DOT                           &kp DOT                           &kp DOT                           &kp DOT  &kp DOT             &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &to 6
&to 3                             &kp PAUSE_BREAK                   &kp PRINTSCREEN                   &kp DOT                           &kp DOT  &kp DOT  &kp DOT             &kp DOT           &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT  &to 5
                                                                                                      &trans                            &trans   &trans                                         &trans   &trans   &to 2
            >;

            label = "EatMy4ts";
        };

        SY5 {
            bindings = <
&studio_unlock  &kp DOT  &kp DOT  &kp DOT  &out OUT_BLE  &out OUT_USB                      &kp DOT           &kp DOT  &kp DOT      &kp DOT  &kp DOT  &kp DOT  &kp DOT
&kp DOT         &kp DOT  &kp DOT  &kp DOT  &bt BT_CLR    &bootloader              &kp DOT  &kp DOT  &kp DOT  &kp DOT  &kp DOT      &kp DOT  &kp DOT  &kp DOT  &kp DOT
&to 4           &kp DOT  &kp DOT  &kp DOT  &kp DOT       &sys_reset    &kp DOT             &kp DOT           &kp DOT  &key_repeat  &kp DOT  &kp DOT  &kp DOT  &to 6
                                  &to 0    &trans        &trans                                              &trans   &trans       &to 2
            >;

            label = "Systerra5";
        };

        R6BB {
            display-name = "RGBB";
            bindings = <
&bt BT_CLR_ALL  &bt BT_CLR       &kp DOT     &kp DOT  &kp DOT          &kp DOT                              &kp DOT           &kp DOT    &kp DOT          &kp DOT          &kp DOT          &kp DOT  &kp DOT
&bt BT_PRV      &bt BT_NXT       &kp DOT     &kp DOT  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF             &kp DOT  &kp DOT  &kp DOT  &kp DOT    &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &kp DOT  &kp DOT
&to 5           &rgb_ug RGB_TOG  &kp PERIOD  &kp DOT  &rgb_ug RGB_SAD  &rgb_ug RGB_EFR  &kp DOT             &kp DOT           &kp DOT    &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &kp DOT  &kp DOT
                                             &to 0    &trans           &trans                                                 &kp ENTER  &kp DEL          &to 2
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "R6BB";
        };
    };
};
